using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class THEWORLD : MonoBehaviour
{
    public float originalTimeScale;
    public float powerCompression;
    public float timeCompression;
    public float speedCompression;
    public float stepCompression;
    public float needMana;
    public float haveMana;
    private float timeLeft;
    public bool isDebuff;
    public bool isCoroutine;
    public float debuffTime;
    public float debuffPower;
    public float accumulatedWeakness;
    private float powerC, timeC, speedC, stepC, debuffT, debuffP;
    public float returnMana;
    public float spentTime;
    private Coroutine slowTimeCoroutine;

    //����� ����� ������� �����, ���� ���������, �� ������
    //����� ����� ����������� �� ���� ���������� � ������� ������ ����������� ����

    void SaveNumber()
    {
        powerC = powerCompression;
        timeC = timeCompression;
        speedC = speedCompression ;
        stepC = stepCompression;
        debuffT = debuffTime;
        debuffP = debuffPower;
    }

    void LoadNumber()
    {
        powerCompression = powerC;
        timeCompression = timeC;
        speedCompression = speedC;
        stepCompression = stepC;
        debuffTime = debuffT;
        debuffPower = debuffP;
        isCoroutine = false;
    }

    void Start()
    {
        SaveNumber();
        

    }

    // Update is called once per frame
    void Update()
    {
       
        originalTimeScale = Time.timeScale;
        if (Input.GetKeyDown(KeyCode.Space))
        {
            timeLeft = 0;
            if (haveMana >= needMana)
            {
                isDebuff = false;
                slowTimeCoroutine = StartCoroutine(SlowTimeCoroutine());
                isCoroutine = true;
            }
            else
            {
                isDebuff = true;
                ApplyOverHeat(1f - (haveMana / needMana));
                slowTimeCoroutine = StartCoroutine(SlowTimeCoroutine());

            }


        }
        if (Input.GetKeyDown(KeyCode.F))
        {
            if (slowTimeCoroutine != null && !isDebuff)
            {
                StopCoroutine(slowTimeCoroutine);
                slowTimeCoroutine = null;
                ReturnMana();
                
            }
        }
        if (isCoroutine)
        {
            spentTime += Time.unscaledDeltaTime;
            if (spentTime>timeCompression)
            {
                spentTime = 0;
                isCoroutine = false;
            }
        }


    }

    void ApplyOverHeat(float overHeat)
    {
        accumulatedWeakness += overHeat;

        if (overHeat >= 1)
        {
            //���� 0 ��������, �� ����� ����������
            debuffPower += accumulatedWeakness + powerCompression+1;
            debuffTime = accumulatedWeakness+debuffTime+timeCompression/5;
            powerCompression += powerCompression/2;
            timeCompression /= 2;
        }
        else
        {
            //��� ������ ��������, ��� ���� ����������� ���������� � ���� ����������
            powerCompression += overHeat / 4;
            timeCompression *= (1 - overHeat);
            debuffTime = overHeat;
            debuffPower += overHeat;



        }
        //����������� ��������, ��� ����������� � ���� �� ��\������ ������
       
    }

    void ReturnMana()
    {
        isCoroutine = false;
        Time.timeScale = 1;
        var manaBonus = ((timeCompression - spentTime) / timeCompression);
        returnMana = (int)((manaBonus + 1)*needMana)-needMana;
        spentTime = 0;


    }


    private IEnumerator SlowTimeCoroutine()
    {
       
        while (Time.timeScale > powerCompression && timeLeft < timeCompression)
        {
            Time.timeScale -= speedCompression * stepCompression;
            timeLeft += Time.unscaledDeltaTime;
            
            yield return null;
        }


        yield return new WaitForSeconds(timeCompression - timeLeft);

        while (Time.timeScale < 1f)
        {
            Time.timeScale += speedCompression * 2 * stepCompression * 2;
            yield return null;
        }
        Time.timeScale = 1f;


        if (isDebuff)
        {
            
            while (Time.timeScale < debuffPower)
            {
                Time.timeScale += (speedCompression * stepCompression)*2;
                yield return null;
            }
            Time.timeScale = debuffPower;

            yield return new WaitForSeconds(debuffTime);


            while (Time.timeScale > 1f)
            {
                Time.timeScale -= speedCompression * 2f * stepCompression * 2f;
                yield return null;
            }
            Time.timeScale = 1;
        }
        LoadNumber();
    }

    

}
